pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "mohamedathikr/doctor-app:latest"
        WORK_DIR = "Responsive-animated-login-signup-form"
        K8S_DEPLOYMENT = "${WORK_DIR}/k8s/doctor-app-deployment.yaml"
        K8S_SERVICE = "${WORK_DIR}/k8s/doctor-app-service.yaml"
        PROMETHEUS_DEPLOYMENT = "${WORK_DIR}/k8s/prometheus-deployment.yaml"
        PROMETHEUS_CONFIG = "${WORK_DIR}/k8s/prometheus-config.yaml"
        GRAFANA_DEPLOYMENT = "${WORK_DIR}/k8s/grafana-deployment.yaml"
    }

    stages {
        stage('Cleanup Workspace') {
            steps {
                echo "üßπ Cleaning workspace..."
                cleanWs()
            }
        }

        stage('Clone Repository') {
            steps {
                echo "üì• Cloning repository..."
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: 'main']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Athik01/task06.git',
                        credentialsId: 'git-credentials'
                    ]]
                ])
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dir(WORK_DIR) { // ‚úÖ Set working directory
                        echo "üê≥ Building Docker Image: ${DOCKER_IMAGE}"
                        powershell """
                            Write-Output 'üöÄ Starting Docker Build...'
                            docker build -t "${DOCKER_IMAGE}" .
                        """
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    echo "üì§ Pushing Docker Image to Docker Hub..."
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        powershell """
                            Write-Output 'üîÑ Logging in to Docker Hub...'
                            docker login -u "${DOCKER_USER}" -p "${DOCKER_PASS}"
                            Write-Output 'üöÄ Pushing Image: ${DOCKER_IMAGE}'
                            docker push "${DOCKER_IMAGE}"
                        """
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
    steps {
        script {
            dir(WORK_DIR) {
                echo "üöÄ Deploying Doctor-App to Kubernetes..."
                powershell """
                    Write-Output 'üìÇ Applying Deployment: ${K8S_DEPLOYMENT}'
                    kubectl apply -f '${K8S_DEPLOYMENT}'
                    Write-Output 'üìÇ Applying Service: ${K8S_SERVICE}'
                    kubectl apply -f '${K8S_SERVICE}'
                """
            }
        }
    }
}


        stage('Deploy Monitoring Stack') {
            steps {
                script {
                    dir(WORK_DIR) { // ‚úÖ Ensure correct directory for monitoring files
                        echo "üöÄ Deploying Prometheus and Grafana to Kubernetes..."
                        powershell """
                            Write-Output 'üìÇ Applying Prometheus Config: ${PROMETHEUS_CONFIG}'
                            kubectl apply -f "${PROMETHEUS_CONFIG}"
                            Write-Output 'üìÇ Applying Prometheus Deployment: ${PROMETHEUS_DEPLOYMENT}'
                            kubectl apply -f "${PROMETHEUS_DEPLOYMENT}"
                            Write-Output 'üìÇ Applying Grafana Deployment: ${GRAFANA_DEPLOYMENT}'
                            kubectl apply -f "${GRAFANA_DEPLOYMENT}"
                        """
                    }
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                script {
                    echo "üîç Verifying Kubernetes Deployment..."
                    powershell """
                        Write-Output 'üìå Listing Pods...'
                        kubectl get pods
                        Write-Output 'üìå Listing Services...'
                        kubectl get svc
                    """
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Deployment Successful!"
        }
        failure {
            echo "‚ùå Deployment Failed!"
        }
    }
}
