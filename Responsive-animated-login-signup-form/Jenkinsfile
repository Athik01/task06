pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "mohamedathikr/doctor-app:latest"
        K8S_DEPLOYMENT = "doctor-app-deployment.yaml"
        K8S_SERVICE = "doctor-app-service.yaml"
        PROMETHEUS_DEPLOYMENT = "prometheus-deployment.yaml"
        PROMETHEUS_CONFIG = "prometheus-config.yaml"
        GRAFANA_DEPLOYMENT = "grafana-deployment.yaml"
    }

    stages {
        stage('Cleanup Workspace') {
            steps {
                echo "🧹 Cleaning workspace..."
                cleanWs()
            }
        }

        stage('Clone Repository') {
            steps {
                echo "📥 Cloning repository..."
                withCredentials([usernamePassword(credentialsId: 'github-credentials', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASS')]) {
                    powershell """
                        Write-Output '🌐 Cloning from GitHub...'
                        git clone https://$env:GIT_USER:$env:GIT_PASS@github.com/Athik01/task06.git
                        cd task06
                    """
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "🐳 Building Docker Image: $DOCKER_IMAGE"
                    powershell """
                        Write-Output '🚀 Starting Docker Build...'
                        docker build -t $env:DOCKER_IMAGE .
                    """
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    echo "📤 Pushing Docker Image to Docker Hub..."
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        powershell """
                            Write-Output '🔄 Logging in to Docker Hub...'
                            docker login -u $env:DOCKER_USER -p $env:DOCKER_PASS
                            Write-Output '🚀 Pushing Image: $env:DOCKER_IMAGE'
                            docker push $env:DOCKER_IMAGE
                        """
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    echo "🚀 Deploying Doctor-App to Kubernetes..."
                    powershell """
                        Write-Output '📂 Applying Deployment: $env:K8S_DEPLOYMENT'
                        kubectl apply -f $env:K8S_DEPLOYMENT
                        Write-Output '📂 Applying Service: $env:K8S_SERVICE'
                        kubectl apply -f $env:K8S_SERVICE
                    """
                }
            }
        }

        stage('Deploy Monitoring Stack') {
            steps {
                script {
                    echo "🚀 Deploying Prometheus and Grafana to Kubernetes..."
                    powershell """
                        Write-Output '📂 Applying Prometheus Config: $env:PROMETHEUS_CONFIG'
                        kubectl apply -f $env:PROMETHEUS_CONFIG
                        Write-Output '📂 Applying Prometheus Deployment: $env:PROMETHEUS_DEPLOYMENT'
                        kubectl apply -f $env:PROMETHEUS_DEPLOYMENT
                        Write-Output '📂 Applying Grafana Deployment: $env:GRAFANA_DEPLOYMENT'
                        kubectl apply -f $env:GRAFANA_DEPLOYMENT
                    """
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                script {
                    echo "🔍 Verifying Kubernetes Deployment..."
                    powershell """
                        Write-Output '📌 Listing Pods...'
                        kubectl get pods
                        Write-Output '📌 Listing Services...'
                        kubectl get svc
                    """
                }
            }
        }
    }

    post {
        success {
            echo "✅ Deployment Successful!"
        }
        failure {
            echo "❌ Deployment Failed!"
        }
    }
}
