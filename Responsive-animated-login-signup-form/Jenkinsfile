pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "mohamedathikr/doctor-app:latest"
        WORK_DIR = "Responsive-animated-login-signup-form"
        K8S_DEPLOYMENT = "${WORK_DIR}/k8s/doctor-app-deployment.yaml"
        K8S_SERVICE = "${WORK_DIR}/k8s/doctor-app-service.yaml"
        PROMETHEUS_DEPLOYMENT = "${WORK_DIR}/k8s/prometheus-deployment.yaml"
        PROMETHEUS_CONFIG = "${WORK_DIR}/k8s/prometheus-configmap.yaml"  // ✅ Fixed file name
        GRAFANA_DEPLOYMENT = "${WORK_DIR}/k8s/grafana-deployment.yaml"
        KUBECONFIG = 'C:/Users/rathi/.kube/config'
    }

    stages {
        stage('Cleanup Workspace') {
            steps {
                echo "Cleaning workspace..."
                cleanWs()
            }
        }

        stage('Clone Repository') {
            steps {
                echo "Cloning repository..."
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: 'main']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Athik01/task06.git',
                        credentialsId: 'git-credentials'
                    ]]
                ])
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dir(WORK_DIR) {
                        echo "Building Docker Image: ${DOCKER_IMAGE}"
                        powershell '''
                            Write-Host "Starting Docker Build..."
                            docker build -t "${env:DOCKER_IMAGE}" .
                        '''
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    echo "Pushing Docker Image to Docker Hub..."
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        powershell '''
                            Write-Host "Logging in to Docker Hub..."
                            docker login -u "${env:DOCKER_USER}" -p "${env:DOCKER_PASS}"
                            Write-Host "Pushing Image: ${env:DOCKER_IMAGE}"
                            docker push "${env:DOCKER_IMAGE}"
                        '''
                    }
                }
            }
        }

        stage('Verify YAML Files') {  // ✅ New stage to check files before deployment
            steps {
                script {
                    echo "Verifying Kubernetes YAML Files..."
                    powershell '''
                        if (!(Test-Path "${env:PROMETHEUS_CONFIG}")) {
                            Write-Host "ERROR: Prometheus config file not found!" -ForegroundColor Red
                            exit 1
                        }
                        if (!(Test-Path "${env:PROMETHEUS_DEPLOYMENT}")) {
                            Write-Host "ERROR: Prometheus deployment file not found!" -ForegroundColor Red
                            exit 1
                        }
                        if (!(Test-Path "${env:GRAFANA_DEPLOYMENT}")) {
                            Write-Host "ERROR: Grafana deployment file not found!" -ForegroundColor Red
                            exit 1
                        }
                    '''
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    echo "Deploying Doctor-App to Kubernetes..."
                    powershell '''
                        kubectl apply -f "${env:K8S_DEPLOYMENT}" --validate=false
                        kubectl apply -f "${env:K8S_SERVICE}" --validate=false
                    '''
                }
            }
        }

        stage('Deploy Monitoring Stack') {
            steps {
                script {
                    echo "Deploying Prometheus and Grafana..."
                    powershell '''
                        Write-Host "Applying Prometheus Config: ${env:PROMETHEUS_CONFIG}"
                        kubectl apply -f "${env:PROMETHEUS_CONFIG}"
                        
                        Write-Host "Applying Prometheus Deployment: ${env:PROMETHEUS_DEPLOYMENT}"
                        kubectl apply -f "${env:PROMETHEUS_DEPLOYMENT}"
                        
                        Write-Host "Applying Grafana Deployment: ${env:GRAFANA_DEPLOYMENT}"
                        kubectl apply -f "${env:GRAFANA_DEPLOYMENT}"
                    '''
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                script {
                    echo "Verifying Kubernetes Deployment..."
                    powershell '''
                        Write-Host "Listing Pods..."
                        kubectl get pods
                        Write-Host "Listing Services..."
                        kubectl get svc
                    '''
                }
            }
        }
    }

    post {
        success {
            echo "Deployment Successful!"
        }
        failure {
            echo "Deployment Failed!"
        }
    }
}
